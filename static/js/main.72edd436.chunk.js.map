{"version":3,"sources":["components/Header.js","components/SearchResults.js","components/EmployeeTable.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Navbar","className","bg","variant","Brand","href","Form","inline","FormControl","type","placeholder","name","onChange","event","initSort","Button","SearchResults","alt","firstName","src","photo","lastName","email","cell","age","EmployeeTable","state","employees","employeeSort","search","sorted","componentDidMount","fetch","then","res","json","setState","results","filter","first","toLowerCase","includes","last","target","value","render","map","employee","key","id","picture","medium","dob","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72edd436.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport \"./style.css\";\n\n// react bootstrap search\nconst Header = (props) => {\n    return (\n        <Navbar className=\"Header\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Employee Directory</Navbar.Brand>\n    \n        <Form inline>\n        <FormControl type=\"text\" placeholder=\"Search\" name=\"search\" className=\"mr-sm-2\"\n        onChange={(event) => props.initSort(event)}/>\n        <Button variant=\"outline-info\">Search Employee</Button>\n        </Form>\n      </Navbar>\n    )\n}\n\nexport default Header","import React from 'react';\n\nconst SearchResults = (props) => {\n    return (\n        <tr className=\"tr\">\n                    <td><img alt={props.firstName} src={props.photo} /></td>\n                    <td>{props.firstName}</td>\n                    <td>{props.lastName}</td>\n                    <td>{props.email}</td>\n                    <td>{props.cell}</td>\n                    <td>{props.age}</td>\n        </tr>\n    )\n}\n\nexport default SearchResults","import React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport SearchResults from './SearchResults.js';\nimport \"./style.css\";\n\nclass EmployeeTable extends Component {\n\n    state = {\n        employees: [],\n        employeeSort: [],\n        search: \"\",\n        sorted: false,\n    };\n\n    componentDidMount = () => {\n        fetch(\"https://randomuser.me/api/?results=200&nat=us\")\n            .then(res => res.json())\n            .then(json => {\n                this.setState({ employees: json.results })\n            });\n    };\n\n    employeeSort = () => {\n        let { employees, search } = this.state;\n        let employeeSort = employees.filter(sorted => {\n            return (\n                sorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\n                sorted.name.last.toLowerCase().includes(search.toLowerCase())\n            )\n        });\n        this.setState({ employeeSort })\n    }\n\n    initSort = event => {\n        this.setState({ search: event.target.value }, () => {\n            this.employeeSort();\n            this.setState({ sorted: true });\n        });\n    };\n\n    render = () => {\n        return (\n            <div>\n                <div>\n                    <Header\n                        search={this.state.search}\n                        initSort={this.initSort}\n                    />\n                </div>\n\n                <div className=\"Container\">\n                    <table className=\"Table\">\n                        <thead className=\"thead\">\n                            <tr>\n                                <th>Photo</th>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email</th>\n                                <th>Cell Number</th>\n                                <th>Age</th>\n                            </tr>\n                            <tr className=\"border_bottom\"></tr>\n                        </thead>\n                        <tbody>\n\n                            {!this.state.sorted\n                                ? this.state.employees.map(employee => (\n\n                                    <SearchResults\n                                        key={employee.id.value}\n                                        photo={employee.picture.medium}\n                                        firstName={employee.name.first}\n                                        lastName={employee.name.last}\n                                        email={employee.email}\n                                        cell={employee.cell}\n                                        age={employee.dob.age}\n                                    />\n\n                                ))\n\n                                : this.state.employeeSort.map(employee => (\n\n                                    <SearchResults\n                                        key={employee.id.value}\n                                        photo={employee.picture.medium}\n                                        firstName={employee.name.first}\n                                        lastName={employee.name.last}\n                                        email={employee.email}\n                                        cell={employee.cell}\n                                        age={employee.dob.age}\n                                    />\n\n                                ))}\n\n                </tbody>\n                    </table>\n                </div >\n            </div >\n\n        )\n\n    }\n}\n\nexport default EmployeeTable","import React from 'react';\nimport EmployeeTable from \"./components/EmployeeTable.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <EmployeeTable />\n         \n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}